MethodInstance for foo(::Vector{Float64})
  from foo(x; output) @ Main C:\Users\marti\Google Drive\WEBSITES\julia_book2\_assets\PAGES\8c_staticVectors\code\region6a.jl:4
Arguments
  #self#::Core.Const(foo)
  x::Vector{Float64}
Locals
  @_3::UNION{NOTHING, TUPLE{INT64, INT64}}
  output::ANY
  i::Int64
  temp::BitVector
Body::MARRAY{_A, FLOAT64, 1} WHERE _A<:TUPLE
1 ─ %1  = Main.SVector::Core.Const(SVector)
│   %2  = Main.length(x)::Int64
│   %3  = Main.eltype(x)::Core.Const(Float64)
│   %4  = Core.apply_type(%1, %2, %3)::TYPE{SVECTOR{_A, FLOAT64}} WHERE _A
│         (output = (%4)(Main.undef))
│   %6  = Main.MVector::Core.Const(MVector)
│   %7  = Main.length(x)::Int64
│   %8  = Main.eltype(x)::Core.Const(Float64)
│   %9  = Core.apply_type(%6, %7, %8)::TYPE{MVECTOR{_A, FLOAT64}} WHERE _A
│         (output = (%9)(Main.undef))
│   %11 = Main.eachindex(x)::Base.OneTo{Int64}
│         (@_3 = Base.iterate(%11))
│   %13 = (@_3 === nothing)::Bool
│   %14 = Base.not_int(%13)::Bool
└──       goto #4 if not %14
2 ┄ %16 = @_3::Tuple{Int64, Int64}
│         (i = Core.getfield(%16, 1))
│   %18 = Core.getfield(%16, 2)::Int64
│   %19 = Main.:>::Core.Const(>)
│   %20 = Base.getindex(x, i)::Float64
│   %21 = Base.broadcasted(%19, x, %20)::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(>), Tuple{Vector{Float64}, Float64}}
│         (temp = Base.materialize(%21))
│   %23 = Main.sum(temp)::Int64
│         Base.setindex!(output::MArray{_A, Float64, 1} where _A<:Tuple, %23, i)
│         (@_3 = Base.iterate(%11, %18))
│   %26 = (@_3 === nothing)::Bool
│   %27 = Base.not_int(%26)::Bool
└──       goto #4 if not %27
3 ─       goto #2
4 ┄       return output::MArray{_A, Float64, 1} where _A<:Tuple

